#ifndef OSMIUM_HISTORY_SPLITTER_TILE_GRID_HPP
#define OSMIUM_HISTORY_SPLITTER_TILE_GRID_HPP

/*

This file is part of the Osmium History Splitter

Copyright 2015 Matt Amos <zerebubuth@gmail.com>.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <osmium/osm/node.hpp>
#include <osmium/osm/way.hpp>
#include <osmium/osm/relation.hpp>
#include <osmium/memory/buffer.hpp>

#include <boost/format.hpp>
#include <boost/multi_index_container.hpp>
#include <boost/multi_index/sequenced_index.hpp>
#include <boost/multi_index/hashed_index.hpp>
#include <boost/multi_index/member.hpp>

#include <memory>
#include <fstream>

namespace hsplitter {

// TODO: remove, or make hidden by debug flag
extern size_t g_evictions, g_flushes;

// represents a memory buffer waiting to be written to
// a particular tile file. this is buffered so that we
// don't have to have a whole load of open file
// descriptors.
struct tile_file {
  typedef osmium::memory::Buffer buffer;
  typedef std::unique_ptr<buffer> buffer_ptr;
  typedef hsplitter::tile_t tile_t;

  tile_file()
    : m_id(0), m_buffer(), m_buffer_dir() {
  }

  tile_file(tile_t id, size_t capacity, const std::string &buffer_dir)
    : m_id(id),
      m_buffer(new buffer(capacity, osmium::memory::Buffer::auto_grow::yes)),
      m_buffer_dir(buffer_dir) {
    set_callback();
  }

  tile_file(tile_file &&tf) : m_id(tf.m_id), m_buffer(), m_buffer_dir(tf.m_buffer_dir) {
    swap_buffer(tf.m_buffer);
  }
  tile_file(const tile_file &) = delete;
  const tile_file &operator=(tile_file &&tf) {
    m_id = tf.m_id;
    swap_buffer(tf.m_buffer);
    m_buffer_dir = tf.m_buffer_dir;
    return *this;
  }
  const tile_file &operator=(const tile_file &) = delete;

  void write(const osmium::OSMObject &obj) {
    assert(!empty());
    m_buffer->add_item(obj);
    m_buffer->commit();
  }

  void flush() {
    assert(!empty());
    static_flush(m_id, *m_buffer, m_buffer_dir);
  }

  static void static_flush(hsplitter::tile_t id, osmium::memory::Buffer &buffer,
                           const std::string &buffer_dir) {
    assert(buffer);
    if (buffer.begin() != buffer.end()) {
      // TODO: configurable, default to $TMPDIR
      std::string filename = (boost::format("%1%/%2%.buf") % buffer_dir % id).str();
      std::ofstream file(filename, std::ios::binary | std::ios::ate | std::ios::app);
      file.write(reinterpret_cast<const char *>(buffer.data()), buffer.committed());
      buffer.clear();
      std::fill(buffer.data(), buffer.data() + buffer.capacity(), 0);

      ++g_flushes;
    }
  }

  void swap(tile_file &tf) {
    std::swap(m_id, tf.m_id);
    swap_buffer(tf.m_buffer);
    std::swap(m_buffer_dir, tf.m_buffer_dir);
  }

  bool empty() const {
    return !m_buffer;
  }

  tile_t m_id;
  std::string m_buffer_dir;

private:
  buffer_ptr m_buffer;

  void swap_buffer(buffer_ptr &other) {
    if (m_buffer) {
      m_buffer->set_full_callback([](osmium::memory::Buffer&){});
    }
    if (other) {
      other->set_full_callback([](osmium::memory::Buffer&){});
    }
    std::swap(m_buffer, other);
    set_callback();
  }

  void set_callback() {
    const hsplitter::tile_t id = m_id;
    const std::string buffer_dir = m_buffer_dir;
    if (m_buffer) {
      m_buffer->set_full_callback([id, buffer_dir](osmium::memory::Buffer &b) {
          static_flush(id, b, buffer_dir);
        });
    }
  }
};

// LRU cache of buffers
struct tile_grid {
  typedef boost::multi_index::multi_index_container<
    tile_file,
    boost::multi_index::indexed_by<
      boost::multi_index::sequenced<>,
      boost::multi_index::hashed_unique<boost::multi_index::member<tile_file, hsplitter::tile_t, &tile_file::m_id> >
      >
    > mru_tile_set;

  tile_grid(size_t n_tiles, size_t capacity, const std::string &buffer_dir) {
    m_buffer_dir = buffer_dir;
    for (size_t i = 0; i < n_tiles; ++i) {
      tile_file tf(0, capacity, m_buffer_dir);
      m_free_tiles.emplace_back(std::move(tf));
    }
  }

  tile_file &tile(hsplitter::tile_t id) {
    auto &tile_idx = m_open_tiles.get<1>();
    auto itr = tile_idx.find(id);

    if (itr == tile_idx.end()) {
      if (m_free_tiles.empty()) {
        evict_lru_tile();
      }

      tile_file tf;
      tf.swap(m_free_tiles.front());
      m_free_tiles.pop_front();
      tf.m_id = id;
      tf.m_buffer_dir = m_buffer_dir;
      auto pair = tile_idx.emplace(std::move(tf));
      itr = pair.first;
    }

    m_open_tiles.relocate(m_open_tiles.begin(), m_open_tiles.project<0>(itr));
    assert(itr->m_id == id);
    return const_cast<tile_file &>(*itr);
  }

  void evict_lru_tile() {
    assert(m_open_tiles.size() > 0);

    auto &tile = const_cast<tile_file &>(m_open_tiles.back());
    tile.flush();
    m_free_tiles.emplace_front();
    m_free_tiles.front().swap(tile);
    assert(m_open_tiles.back().empty());
    m_open_tiles.pop_back();

    ++g_evictions;
  }

  void close() {
    for (auto &tile : m_open_tiles) {
      const_cast<tile_file &>(tile).flush();
    }
  }

private:
  std::list<tile_file> m_free_tiles;
  mru_tile_set m_open_tiles;
  std::string m_buffer_dir;
};

} // namespace hsplitter

#endif /* OSMIUM_HISTORY_SPLITTER_TILE_GRID_HPP */
