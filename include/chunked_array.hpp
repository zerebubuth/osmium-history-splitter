#ifndef OSMIUM_HISTORY_SPLITTER_CHUNKED_ARRAY_HPP
#define OSMIUM_HISTORY_SPLITTER_CHUNKED_ARRAY_HPP

/*

This file is part of the Osmium History Splitter

Copyright 2015 Matt Amos <zerebubuth@gmail.com>.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <vector>
#include <memory>
#include <algorithm>
#include <iterator>
#include <cassert>

namespace hsplitter {
namespace container {

template <typename OuterIter, typename InnerIter>
struct nested_iterator
  : public std::iterator<std::random_access_iterator_tag,
                         typename InnerIter::value_type> {
  typedef std::iterator<std::random_access_iterator_tag,
                        typename InnerIter::value_type> parent;
  typedef typename parent::pointer pointer;
  typedef typename parent::reference reference;
  typedef typename parent::difference_type difference_type;
  typedef nested_iterator<OuterIter, InnerIter> self;

  nested_iterator(OuterIter itr, OuterIter begin, OuterIter end)
    : m_outer(itr), m_outer_begin(begin), m_outer_end(end) {
    if (m_outer != m_outer_end) {
      m_inner = std::begin(*m_outer);
    }
  }

  nested_iterator(const self &) = default;
  nested_iterator(self &&) = default;
  self &operator=(const self &) = default;
  self &operator=(self &&) = default;

  reference operator*() { return *m_inner; }
  pointer operator->() { return m_inner.operator->(); }

  inline const self &operator++() {
    if (m_outer != m_outer_end) {
      ++m_inner;
      if (m_inner == std::end(*m_outer)) {
        ++m_outer;
        if (m_outer != m_outer_end) {
          m_inner = std::begin(*m_outer);
        }
      }
    }
    return *this;
  }
  inline self operator++(int) {
    self result = *this;
    ++(*this);
    return result;
  }

  friend void swap(self &a, self &b) {
    std::swap(a.m_outer, b.m_outer);
    std::swap(a.m_outer_begin, b.m_outer_begin);
    std::swap(a.m_outer_end, b.m_outer_end);
    std::swap(a.m_inner, b.m_inner);
  }

  inline bool operator==(const self &other) const {
    return ((m_outer == other.m_outer) &&
            ((m_outer == m_outer_end) || (m_inner == other.m_inner)) &&
            (m_outer_begin == other.m_outer_begin) &&
            (m_outer_end == other.m_outer_end));
  }
  inline bool operator!=(const self &other) const {
    return !operator==(other);
  }

  inline const self &operator--() {
    if (m_inner == std::begin(*m_outer) &&
        m_outer != m_outer_begin) {
      --m_outer;
      m_inner = std::end(*m_outer);
    }
    --m_inner;
    return *this;
  }
  inline self operator--(int) {
    self result = *this;
    ++(*this);
    return result;
  }

  self operator+(difference_type i) const {
    self result = *this;
    result += i;
    return result;
  }
  self operator-(difference_type i) const {
    self result = *this;
    result -= i;
    return result;
  }
  difference_type operator-(const self &other) const {
    if (other > *this) {
      return -(other.operator-(*this));

    } else if (m_outer == other.m_outer) {
      if (m_outer == m_outer_end) {
        return 0;
      } else {
        return m_inner - other.m_inner;
      }

    } else {
      InnerIter inner = other.m_inner;
      OuterIter outer = other.m_outer;
      difference_type d = 0;

      while (outer != m_outer) {
        d += std::end(*outer) - inner;
        ++outer;
        inner = std::begin(*outer);
      }
      if (outer != m_outer_end) {
        d += m_inner - inner;
      }
      return d;
    }
  }

  const self &operator+=(difference_type i) {
    if (i < 0) {
      operator-=(-i);

    } else if (i > 0) {
      while (true) {
        difference_type left_in_block = std::end(*m_outer) - m_inner;
        if (i < left_in_block) {
          m_inner += i;
          break;
        } else {
          i -= left_in_block;
          ++m_outer;
          if (m_outer == m_outer_end) {
            break;
          }
          m_inner = std::begin(*m_outer);
        }
      }
    }

    return *this;
  }
  const self &operator-=(difference_type i) {
    if (i < 0) {
      operator+=(-i);

    } else {
      while (true) {
        difference_type left_in_block = m_inner - std::begin(*m_outer);
        if (i <= left_in_block) {
          m_inner -= i;
          break;

        } else {
          i -= left_in_block;
          if (m_outer == m_outer_begin) {
            m_inner = std::begin(m_outer);
            break;
          }
          --m_outer;
          m_inner = std::end(m_outer);
          --m_inner;
        }
      }
    }

    return *this;
  }

  inline bool operator<(const self &other) const {
    return (m_outer < other.m_outer ||
            (m_outer == other.m_outer &&
             m_inner < other.m_inner));
  }
  inline bool operator>(const self &other) const {
    return (m_outer > other.m_outer ||
            (m_outer == other.m_outer &&
             m_inner > other.m_inner));
  }
  inline bool operator<=(const self &other) const {
    return !operator>(other);
  }
  inline bool operator>=(const self &other) const {
    return !operator<(other);
  }

  inline reference operator[](difference_type i) {
    self result = *this;
    result += i;
    return *result;
  }

private:
  OuterIter m_outer, m_outer_begin, m_outer_end;
  InnerIter m_inner;
};

template <typename It1, typename It2>
inline nested_iterator<It1, It2> operator+(std::ptrdiff_t i, const nested_iterator<It1, It2> &it) {
  return it + i;
}

template <typename T, size_t chunk_size = 16384>
struct chunked_array {
  typedef std::vector<T> inner_type;
  typedef std::vector<inner_type> outer_type;
  typedef nested_iterator<typename outer_type::iterator, typename inner_type::iterator> iterator;

  inline iterator begin() { return iterator(std::begin(m_container), std::begin(m_container), std::end(m_container)); }
  inline iterator end()   { return iterator(std::end(m_container),   std::begin(m_container), std::end(m_container)); }

  inline void push_back(const T &t) {
    auto &inner = ensure_capacity();
    assert(inner.size() < chunk_size);
    inner.push_back(t);
  }
  inline void push_back(T &&t) {
    auto &inner = ensure_capacity();
    assert(inner.size() < chunk_size);
    inner.push_back(std::move(t));
  }

  inline size_t capacity() const { return chunk_size * m_container.size(); }
  inline size_t size() const {
    if (m_container.empty()) {
      return 0;

    } else {
      return chunk_size * (m_container.size() - 1) + m_container.back().size();
    }
  }

private:
  outer_type m_container;

  inline inner_type &ensure_capacity() {
    if (m_container.empty() ||
        (m_container.back().size() == chunk_size)) {
      m_container.emplace_back();
      m_container.back().reserve(chunk_size);
    }
    return m_container.back();
  }
};

} // namespace container
} // namespace hsplitter

namespace std {
template <typename It1, typename It2>
struct iterator_traits<hsplitter::container::nested_iterator<It1, It2> > {
  typedef typename hsplitter::container::nested_iterator<It1, It2>::reference reference;
};
} // namespace std

#endif /* OSMIUM_HISTORY_SPLITTER_CHUNKED_ARRAY_HPP */
