#ifndef OSMIUM_HISTORY_SPLITTER_SPLITTER_HPP
#define OSMIUM_HISTORY_SPLITTER_SPLITTER_HPP

/*

This file is part of the Osmium History Splitter

Copyright 2015 Matt Amos <zerebubuth@gmail.com>.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <osmium/geom/coordinates.hpp>
#include <osmium/geom/mercator_projection.hpp>
#include <osmium/osm/node.hpp>
#include <osmium/osm/way.hpp>
#include <osmium/osm/relation.hpp>

#include <unordered_map>
#include <unordered_set>

namespace hsplitter {

using tile_t = uint32_t;

namespace detail {

inline uint32_t interleave(uint32_t n) {
  n &= 0x0000ffffUL;
  n = (n | (n <<  8)) & 0x00ff00ffUL;
  n = (n | (n <<  4)) & 0x0f0f0f0fUL;
  n = (n | (n <<  2)) & 0x33333333UL;
  n = (n | (n <<  1)) & 0x55555555UL;
  return n;
}

inline tile_t morton_code(uint16_t x, uint16_t y) {
  return (interleave(x) << 1) | interleave(y);
}

template <typename Item>
struct osmium_item_type {};

template <>
struct osmium_item_type<osmium::Node> {
  static const osmium::item_type type = osmium::item_type::node;
};

template <>
struct osmium_item_type<osmium::Way> {
  static const osmium::item_type type = osmium::item_type::way;
};

template <>
struct osmium_item_type<osmium::Relation> {
  static const osmium::item_type type = osmium::item_type::relation;
};

template <typename Item, typename Iterator, typename Func>
inline void iterate(Iterator &it, const Iterator &end, Func func) {
  while ((it != end) && (it->type() == osmium_item_type<Item>::type)) {
    const Item &item = static_cast<const Item &>(*it);
    func(item);
    ++it;
  }
}

template <typename TileSet, typename ValueType>
void insert_sorted_and_clear(TileSet &tiles,
                             osmium::object_id_type id,
                             std::vector<ValueType> &buffer) {
  std::sort(buffer.begin(), buffer.end());
  const auto end = std::unique(buffer.begin(), buffer.end());
  for (auto itr = buffer.begin(); itr != end; ++itr) {
    tiles.insert(id, *itr);
  }
  buffer.clear();
}

template <typename TileSet, typename ValueType>
void insert_sorted_pairs_and_clear(TileSet &tiles,
                                   std::vector<ValueType> &buffer,
                                   osmium::object_id_type id) {
  std::sort(buffer.begin(), buffer.end());
  const auto end = std::unique(buffer.begin(), buffer.end());
  for (auto itr = buffer.begin(); itr != end; ++itr) {
    tiles.push_back(std::make_pair(*itr, id));
  }
  buffer.clear();
}

template <typename TileSet, typename ValueType>
void insert_sorted_pairs_and_clear(TileSet &tiles,
                                   osmium::object_id_type id,
                                   std::vector<ValueType> &buffer) {
  std::sort(buffer.begin(), buffer.end());
  const auto end = std::unique(buffer.begin(), buffer.end());
  for (auto itr = buffer.begin(); itr != end; ++itr) {
    tiles.push_back(std::make_pair(id, *itr));
  }
  buffer.clear();
}

} // namespace detail

template <typename TileSet, int Zoom, typename Iterator>
inline TileSet tiles_for_nodes(Iterator &it, const Iterator &end) {
  static const double max_coord = osmium::geom::detail::max_coordinate_epsg3857;
  TileSet tiles;
  // a local buffer to take all the tile IDs so that we
  // can sort & uniq them before pushing the result onto
  // the tile list.
  std::vector<tile_t> buffer;
  osmium::object_id_type last_id = 0;

  detail::iterate<osmium::Node>(it, end, [&] (const osmium::Node &node) {
      if (node.visible() && node.location().valid()) {
        if (last_id != node.id()) {
          detail::insert_sorted_and_clear(tiles, last_id, buffer);
          last_id = node.id();
        }

        // note: we've already checked for validity, no need to do it
        // again.
        double lat = node.location().lat_without_check();

        // nodes outside this range can't be projected to web mercator
        // tiles.
        if ((lat >= -osmium::geom::MERCATOR_MAX_LAT) &&
            (lat <= osmium::geom::MERCATOR_MAX_LAT)) {
          // project to mercator space - we'll use that for splitting
          // into tiles so that it matches the z/x/y (for z=16) that
          // people expect.
          osmium::geom::Coordinates coords(node.location().lon_without_check(), lat);
          coords = osmium::geom::lonlat_to_mercator(coords);

          // tiles are named by the morton code of the x,y coord pair.
          // clamp tile coords to range extent to avoid overflow.
          const double world_size = double(1 << Zoom);
          const double max_extent = world_size - 1.0;
          double x = world_size * 0.5 * (coords.x + max_coord) / max_coord;
          if (x <        0.0) { x =        0.0; }
          if (x > max_extent) { x = max_extent; }
          double y = world_size * 0.5 * (max_coord - coords.y) / max_coord;
          if (y <        0.0) { y =        0.0; }
          if (y > max_extent) { y = max_extent; }

          auto tile_id = detail::morton_code(uint16_t(x), uint16_t(y));

          buffer.push_back(tile_id);
        }
      }
    });
  if (!buffer.empty()) {
    detail::insert_sorted_and_clear(tiles, last_id, buffer);
  }

  return std::move(tiles);
}

// returns a pair of (way_tiles, extra_node_tiles).
template <typename TileSet, typename Iterator>
inline std::pair<TileSet, TileSet> tiles_for_ways(Iterator &it, const Iterator &end,
                                                  const TileSet &node_tiles) {
  TileSet way_tiles, extra_node_tiles;
  std::vector<std::pair<osmium::object_id_type, osmium::object_id_type> > way_nodes;
  // a local buffer to take all the tile IDs so that we
  // can sort & uniq them before pushing the result onto
  // the tile list.
  std::vector<tile_t> buffer;
  osmium::object_id_type last_id = 0;

  // same trick for the way nodes
  std::vector<osmium::object_id_type> wn_buffer;

  detail::iterate<osmium::Way>(it, end, [&] (const osmium::Way &way) {
      if (way.visible()) {
        const auto way_id = way.id();
        if (last_id != way_id) {
          detail::insert_sorted_and_clear(way_tiles, last_id, buffer);
          detail::insert_sorted_pairs_and_clear(way_nodes, wn_buffer, last_id);
          last_id = way_id;
        }

        for (const auto &nd : way.nodes()) {
          auto range = node_tiles.equal_range(nd.ref());

          for (auto tile : range) {
            buffer.push_back(tile);
          }
        }

        for (const auto &nd : way.nodes()) {
          wn_buffer.push_back(nd.ref());
        }
      }
    });
  if (!buffer.empty()) {
    detail::insert_sorted_and_clear(way_tiles, last_id, buffer);
  }
  if (!wn_buffer.empty()) {
    detail::insert_sorted_pairs_and_clear(way_nodes, wn_buffer, last_id);
  }

  std::sort(way_nodes.begin(), way_nodes.end());
  auto itr = std::unique(way_nodes.begin(), way_nodes.end());
  assert(itr == way_nodes.end()); // way nodes should have no duplicates

  last_id = 0;
  for (const auto &pair : way_nodes) {
    if (last_id != pair.first) {
      detail::insert_sorted_and_clear(extra_node_tiles, last_id, buffer);
      last_id = pair.first;
    }
    auto range = way_tiles.equal_range(pair.second);
    size_t num = 0;
    for (auto itr = range.begin(); itr != range.end(); ++itr, ++num) {}
    if (num > 100000) {
      std::cerr << "node[" << pair.first << "] in " << num << " tiles!" << std::endl;
      exit(1);
    }
    for (auto tile : range) {
      buffer.push_back(tile);
    }
  }
  if (!buffer.empty()) {
    detail::insert_sorted_and_clear(extra_node_tiles, last_id, buffer);
  }

  return std::move(std::make_pair(std::move(way_tiles), std::move(extra_node_tiles)));
}

namespace detail {
template <typename TileSet>
inline void add_tiles_for_id(const TileSet &from,
                             typename TileSet::key_type from_id,
                             std::vector<tile_t> &to) {
  auto range = from.equal_range(from_id);

  for (auto tile : range) {
    to.push_back(tile);
  }
}
} // namespace detail

template <typename TileSet, typename Iterator>
std::pair<TileSet, TileSet> tiles_for_relations(Iterator &it, const Iterator &end,
                                                const TileSet &node_tiles,
                                                const TileSet &way_tiles,
                                                const TileSet &extra_node_tiles) {
  using detail::add_tiles_for_id;
  TileSet rel_tiles, extra_rel_tiles;
  std::vector<std::pair<osmium::object_id_type, osmium::object_id_type> > rel_members;
  // a local buffer to take all the tile IDs so that we
  // can sort & uniq them before pushing the result onto
  // the tile list.
  std::vector<tile_t> buffer;
  osmium::object_id_type last_id = 0;
  std::vector<osmium::object_id_type> mbr_buffer;

  detail::iterate<osmium::Relation>(it, end, [&] (const osmium::Relation &rel) {
      if (rel.visible()) {
        const auto rel_id = rel.id();
        if (last_id != rel_id) {
          assert(last_id < rel_id);
          detail::insert_sorted_and_clear(rel_tiles, last_id, buffer);
          detail::insert_sorted_pairs_and_clear(rel_members, last_id, mbr_buffer);
          last_id = rel_id;
        }

        for (const auto &member : rel.members()) {
          const auto member_ref = member.ref();

          if (member.type() == osmium::item_type::node) {
            add_tiles_for_id(node_tiles, member_ref, buffer);
            add_tiles_for_id(extra_node_tiles, member_ref, buffer);

          } else if (member.type() == osmium::item_type::way) {
            add_tiles_for_id(way_tiles, member_ref, buffer);

          } else {
            mbr_buffer.push_back(member_ref);
          }
        }
      }
    });
  if (!buffer.empty()) {
    detail::insert_sorted_and_clear(rel_tiles, last_id, buffer);
  }
  if (!mbr_buffer.empty()) {
    detail::insert_sorted_pairs_and_clear(rel_members, last_id, mbr_buffer);
  }

  auto itr = std::unique(rel_members.begin(), rel_members.end());
  assert(itr == rel_members.end()); // members should not be duplicated, and should be sorted already.

  last_id = 0;
  for (const auto &rel_member : rel_members) {
    if (last_id != rel_member.first) {
      detail::insert_sorted_and_clear(extra_rel_tiles, last_id, buffer);
      last_id = rel_member.first;
    }
    auto range = rel_tiles.equal_range(rel_member.second);
    for (auto tile : range) {
      buffer.push_back(tile);
    }
  }
  if (!buffer.empty()) {
    detail::insert_sorted_and_clear(extra_rel_tiles, last_id, buffer);
  }

  return std::move(std::make_pair(std::move(rel_tiles), std::move(extra_rel_tiles)));
}

} // namespace hsplitter

#endif /* OSMIUM_HISTORY_SPLITTER_SPLITTER_HPP */
