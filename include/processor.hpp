#ifndef OSMIUM_HISTORY_SPLITTER_PROCESSOR_HPP
#define OSMIUM_HISTORY_SPLITTER_PROCESSOR_HPP

/*

This file is part of the Osmium History Splitter

Copyright 2015 Matt Amos <zerebubuth@gmail.com>.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <osmium/io/reader.hpp>
#include <osmium/io/file.hpp>
#include <osmium/io/input_iterator.hpp>
#include <osmium/memory/buffer.hpp>
#include <osmium/osm/changeset.hpp>
#include <osmium/osm/node.hpp>
#include <osmium/osm/way.hpp>
#include <osmium/osm/relation.hpp>

namespace hsplitter {

namespace detail {

struct ignore_callback {
  inline void moving_in_buffer(size_t, size_t) {}
};

template <typename IDSet, typename Iterator>
IDSet find_nodes_in_bbox(Iterator &it, const Iterator &end,
                         const osmium::Box &box) {
  IDSet ids;

  while ((it != end) && (it->type() == osmium::item_type::node)) {
    const osmium::Node &n = static_cast<const osmium::Node &>(*it);
    if (box.contains(n.location())) {
      ids.add(n.id());
    }

    ++it;
  }

  return std::move(ids);
}

template <typename IDSet, typename Iterator>
IDSet find_ways_using(Iterator &it, const Iterator &end,
                      IDSet &node_ids) {
  IDSet way_ids, used_nodes;

  while ((it != end) && (it->type() == osmium::item_type::way)) {
    const osmium::Way &w = static_cast<const osmium::Way &>(*it);
    bool include_way = false;

    for (const auto &nd : w.nodes()) {
      if (node_ids.has(nd.ref())) {
        include_way = true;
        break;
      }
    }

    if (include_way) {
      way_ids.add(w.id());
      for (const auto &nd : w.nodes()) {
        used_nodes.add(nd.ref());
      }
    }

    ++it;
  }

  node_ids.add_all(used_nodes);
  return std::move(way_ids);
}

template <typename IDSet, typename Iterator>
IDSet find_rels_using(Iterator &it, const Iterator &end,
                      const IDSet &node_ids, const IDSet &way_ids) {
  IDSet ids;

  while ((it != end) && (it->type() == osmium::item_type::relation)) {
    const osmium::Relation &r = static_cast<const osmium::Relation &>(*it);
    for (const auto &m : r.members()) {
      bool include = false;

      switch (m.type()) {
      case osmium::item_type::node: include = node_ids.has(m.ref()); break;
      case osmium::item_type::way:  include = way_ids.has(m.ref());  break;
      default: break;
      }
        
      if (include) {
        ids.add(r.id());
        break;
      }
    }

    ++it;
  }

  return std::move(ids);
}

template <typename IDSet, typename Iterator>
IDSet find_changesets(Iterator &it, const Iterator &end,
                      const IDSet &node_ids, const IDSet &way_ids, const IDSet &rel_ids) {
  IDSet ids;

  while (it != end) {
    switch (it->type()) {
    case osmium::item_type::node: {
      const auto &n = static_cast<const osmium::Node &>(*it);
      if (node_ids.has(n.id())) {
        ids.add(n.changeset());
      }
      break;
    }

    case osmium::item_type::way: {
      const auto &w = static_cast<const osmium::Way &>(*it);
      if (way_ids.has(w.id())) {
        ids.add(w.changeset());
      }
      break;
    }

    case osmium::item_type::relation: {
      const auto &r = static_cast<const osmium::Relation &>(*it);
      if (rel_ids.has(r.id())) {
        ids.add(r.changeset());
      }
      break;
    }

    default: break;
    }

    ++it;
  }

  return std::move(ids);
}

} // namespace detail

template <typename IDSet>
struct HistoryExtractReader {
  HistoryExtractReader(osmium::io::File &f,
                       IDSet &&changeset_ids,
                       IDSet &&node_ids,
                       IDSet &&way_ids,
                       IDSet &&rel_ids)
    : m_reader(new osmium::io::Reader(f, (osmium::osm_entity_bits::nwr |
                                          osmium::osm_entity_bits::changeset)))
    , m_changeset_ids(std::move(changeset_ids))
    , m_node_ids(std::move(node_ids))
    , m_way_ids(std::move(way_ids))
    , m_rel_ids(std::move(rel_ids))
    {}

  HistoryExtractReader(const HistoryExtractReader<IDSet> &) = delete;
  HistoryExtractReader(HistoryExtractReader &&other)
    : m_reader(std::move(other.m_reader))
    , m_changeset_ids(std::move(other.m_changeset_ids))
    , m_node_ids(std::move(other.m_node_ids))
    , m_way_ids(std::move(other.m_way_ids))
    , m_rel_ids(std::move(other.m_rel_ids))
    {}

  void close() {
    m_reader->close();
  }

  osmium::io::Header header() const {
    // TODO???
    return m_reader->header();
  }

  osmium::memory::Buffer read() {
    typedef osmium::memory::Buffer::t_iterator<osmium::memory::Item> item_iterator;
    osmium::memory::Buffer buffer;

    while (true) {
      buffer = m_reader->read();
      if (!buffer) { break; }

      for (item_iterator itr = buffer.begin<osmium::memory::Item>();
           itr != buffer.end<osmium::memory::Item>(); ++itr) {
        bool keep = false;

        if (itr->type() == osmium::item_type::changeset) {
          const osmium::Changeset &c = static_cast<const osmium::Changeset &>(*itr);
          keep = m_changeset_ids.has(c.id());

        } else if (itr->type() == osmium::item_type::node) {
          const osmium::Node &n = static_cast<const osmium::Node &>(*itr);
          keep = m_node_ids.has(n.id());

        } else if (itr->type() == osmium::item_type::way) {
          const osmium::Way &w = static_cast<const osmium::Way &>(*itr);
          keep = m_way_ids.has(w.id());

        } else if (itr->type() == osmium::item_type::relation) {
          const osmium::Relation &r = static_cast<const osmium::Relation &>(*itr);
          keep = m_rel_ids.has(r.id());

          if (!keep) {
            for (const auto &m : r.members()) {
              if ((m.type() == osmium::item_type::relation) &&
                  m_rel_ids.has(m.ref())) {
                keep = true;
                break;
              }
            }
          }
        }

        itr->set_removed(!keep);
      }

      detail::ignore_callback ignore;
      buffer.purge_removed(&ignore);

      // TODO: buffer.empty()?
      if (buffer.begin() != buffer.end()) { break; }
    }

    return buffer;
  }

  bool eof() const {
    return m_reader->eof();
  }

private:
  std::unique_ptr<osmium::io::Reader> m_reader;
  IDSet m_changeset_ids, m_node_ids, m_way_ids, m_rel_ids;

}; // struct HistoryExtractReader

template <typename IDSet>
HistoryExtractReader<IDSet> read_extract(osmium::io::File &file, const osmium::Box &box) {
  typedef osmium::io::InputIterator<osmium::io::Reader, osmium::OSMObject> obj_iterator;

  IDSet nodes, ways, rels, changesets;

  // first pass
  {
    osmium::io::Reader reader(file, osmium::osm_entity_bits::nwr);
    obj_iterator it(reader);
    const obj_iterator end;

    nodes = detail::find_nodes_in_bbox<IDSet>(it, end, box);
    ways = detail::find_ways_using<IDSet>(it, end, nodes);
    rels = detail::find_rels_using<IDSet>(it, end, nodes, ways);
  }

  // second pass (which is probably null for PBF files)
  {
    osmium::io::Reader reader(file, osmium::osm_entity_bits::changeset);
    obj_iterator it(reader);
    const obj_iterator end;

    changesets = detail::find_changesets<IDSet>(it, end, nodes, ways, rels);
  }

  // third pass is done inside the history extract reader
  return HistoryExtractReader<IDSet>(
    file, std::move(changesets), std::move(nodes), std::move(ways),
    std::move(rels));
}

} // namespace hsplitter

#endif // OSMIUM_HISTORY_SPLITTER_PROCESSOR_HPP
